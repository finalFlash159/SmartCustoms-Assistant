import logging
from langchain.prompts import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate
)
from langchain_openai import ChatOpenAI
from langchain.agents import initialize_agent, AgentType
from tools.hscode import HSCodeTool, HSCodeDateTool, HSCodeDateRangeTool
from tools.hscode_supplier import HSCodeSupplierTool
from tools.hscode_supplier_date import HSCodeSupplierDateTool
from tools.hscode_supplier_daterange import HSCodeSupplierDateRangeTool
from tools.hscode_status import HSCodeStatusTool
from tools.hscode_supplier_status import HSCodeSupplierStatusTool
from tools.hscode_supplier_date_status import HSCodeSupplierDateStatusTool
from tools.hscode_supplier_daterange_status import HSCodeSupplierDateRangeStatusTool
from tools.productname import ProductNameSearchTool, ProductNameDateTool, ProductNameDateRangeTool, ProductNameStatusTool, ProductNameDateStatusTool, ProductNameDaterangeStatusTool
from langsmith import traceable

logger = logging.getLogger(__name__)

class ToolAgent:
    def __init__(self, package: str = "trial_package", model_name: str = "gpt-3.5-turbo", temperature: float = 0.0, db_config: dict = None):
        logger.info("Kh·ªüi t·∫°o ToolAgent v·ªõi model=%s, temperature=%.1f", model_name, temperature)
        
        self.llm = ChatOpenAI(model_name=model_name, temperature=temperature)
        self.package = package
        self.hscode_tool = HSCodeTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_tool = HSCodeSupplierTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_date_tool = HSCodeSupplierDateTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_daterange_tool = HSCodeSupplierDateRangeTool(tool_agent=self, db_config=db_config)
        self.hscode_status_tool = HSCodeStatusTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_status_tool = HSCodeSupplierStatusTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_date_status_tool = HSCodeSupplierDateStatusTool(tool_agent=self, db_config=db_config)
        self.hscode_supplier_daterange_status_tool = HSCodeSupplierDateRangeStatusTool(tool_agent=self, db_config=db_config)
        self.productname_search_tool = ProductNameSearchTool(tool_agent=self, db_config=db_config)
        self.productname_date_tool = ProductNameDateTool(tool_agent=self, db_config=db_config)
        self.productname_daterange_tool = ProductNameDateRangeTool(tool_agent=self, db_config=db_config)
        self.productname_status_tool = ProductNameStatusTool(tool_agent=self, db_config=db_config)
        self.productname_date_status_tool = ProductNameDateStatusTool(tool_agent=self, db_config=db_config)
        self.productname_daterange_status_tool = ProductNameDaterangeStatusTool(tool_agent=self, db_config=db_config)
        self.hscode_date_tool = HSCodeDateTool(tool_agent=self, db_config=db_config)
        self.hscode_daterange_tool = HSCodeDateRangeTool(tool_agent=self, db_config=db_config)
        
        self.tools = {
            "HSCodeTool": self.hscode_tool,
            "HSCodeSupplierTool": self.hscode_supplier_tool,
            "HSCodeSupplierDateTool": self.hscode_supplier_date_tool,
            "HSCodeSupplierDateRangeTool": self.hscode_supplier_daterange_tool,
            "HSCodeStatusTool": self.hscode_status_tool,
            "HSCodeSupplierStatusTool": self.hscode_supplier_status_tool,
            "HSCodeSupplierDateStatusTool": self.hscode_supplier_date_status_tool,
            "HSCodeSupplierDateRangeStatusTool": self.hscode_supplier_daterange_status_tool,
            "ProductNameSearchTool": self.productname_search_tool,
            "ProductNameDateTool": self.productname_date_tool,
            "ProductNameDateRangeTool": self.productname_daterange_tool,
            "ProductNameStatusTool": self.productname_status_tool,
            "ProductNameDateStatusTool": self.productname_date_status_tool,
            "ProductNameDaterangeStatusTool": self.productname_daterange_status_tool,
            "HSCodeDateTool": self.hscode_date_tool,
            "HSCodeDateRangeTool": self.hscode_daterange_tool
        }
        self.tool_called = {tool_name: False for tool_name in self.tools}  # Theo d√µi tool ƒë∆∞·ª£c g·ªçi

        self.agent = initialize_agent(
            tools=[self.hscode_tool, self.hscode_supplier_tool, self.hscode_supplier_date_tool, self.hscode_supplier_daterange_tool, 
                   self.hscode_status_tool, self.hscode_supplier_status_tool, self.hscode_supplier_date_status_tool,
                     self.hscode_supplier_daterange_status_tool, self.productname_search_tool, self.productname_date_tool,
                   self.productname_daterange_tool, self.productname_status_tool, self.productname_date_status_tool,
                   self.productname_daterange_status_tool, self.hscode_date_tool, self.hscode_daterange_tool],
            llm=self.llm,
            agent=AgentType.OPENAI_FUNCTIONS,
            verbose=True,
        )
        logger.info("ƒê√£ kh·ªüi t·∫°o agent (OPENAI_FUNCTIONS)")

    def set_package(self, package: str):
        self.package = package

    def get_package(self) -> str:
        return self.package  

    @traceable(run_type="llm")
    async def decide_tool_usage(self, query: str) -> bool:
        """
        S·ª≠ d·ª•ng LLM ƒë·ªÉ quy·∫øt ƒë·ªãnh xem truy v·∫•n c√≥ c·∫ßn s·ª≠ d·ª•ng tool hay kh√¥ng.
        Prompt y√™u c·∫ßu tr·∫£ l·ªùi ch·ªâ l√† 'YES' ho·∫∑c 'NO'.
        """
        
        system_prompt = (
            "B·∫°n l√† tr·ª£ l√Ω AI chuy√™n ph√¢n t√≠ch truy v·∫•n c·ªßa ng∆∞·ªùi d√πng. "
            "X√°c ƒë·ªãnh xem truy v·∫•n sau c√≥ c·∫ßn s·ª≠ d·ª•ng tool ƒë·ªÉ l·∫•y th√¥ng tin HS code ho·∫∑c th√¥ng tin v·ªÅ s·∫£n ph·∫©m, t√™n m·∫∑t h√†ng hay kh√¥ng."
            "S·ª≠ d·ª•ng tool khi ng∆∞·ªùi d√πng h·ªèi ho·∫∑c tra c·ª©u th√¥ng tin li√™n quan ƒë·∫øn hscode, nh√† cung c·∫•p, tr·∫°ng th√°i (nh·∫≠p/xu·∫•t), th√¥ng tin li√™n quan ƒë·∫øn m·∫∑t h√†ng,t√™n m·∫∑t h√†ng."
            "Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ th√¥ng tin ho·∫∑c k·∫øt qu·∫£ ph√¢n t√≠ch ph√¢n lo·∫°i ho·∫∑c t√¨m k·∫øt qu·∫£ ph√¢n t√≠ch cho m√£ .../cho s·∫£n ph·∫©n ..., th√¨ kh√¥ng c·∫ßn s·ª≠ d·ª•ng tool. "
            "Tr·∫£ l·ªùi ch·ªâ l√† 'YES' n·∫øu c·∫ßn, ho·∫∑c 'NO' n·∫øu kh√¥ng c·∫ßn."
        )
        user_prompt = f"C√¢u h·ªèi: {query}"
        decision_prompt = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_prompt),
            HumanMessagePromptTemplate.from_template(user_prompt)
        ])
        decision_chain = decision_prompt | self.llm
        decision_response = await decision_chain.ainvoke({"input": query})
        decision = decision_response.content.strip().upper()
        logger.info("Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng tool cho query '%s': %s", query, decision)
        return decision == "YES"

    @traceable(run_type="llm")
    def decide_and_run(self, query: str) -> str:
        self.tool_called = {tool_name: False for tool_name in self.tools}  # Reset tr·∫°ng th√°i
        logger.info("Agent nh·∫≠n query: %s", query)
        try:
            result_msg = self.agent.invoke({"input": query})
            logger.info("Result message: %s", result_msg)
            
            # X√°c ƒë·ªãnh tool n√†o ƒë∆∞·ª£c g·ªçi v√† x·ª≠ l√Ω k·∫øt qu·∫£
            for tool_name, tool in self.tools.items():
                if self.tool_called[tool_name]:
                    if tool.is_summary:
                        logger.info("Tool %s ƒë√£ ƒë∆∞·ª£c g·ªçi v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ t√≥m t·∫Øt.", tool_name)
                        logger.info("K·∫øt qu·∫£ t√≥m t·∫Øt: %s", tool.last_result)
                        return tool.last_result
                    else:
                        output = result_msg["output"]
                        return output if output else "TOOL CALLED BUT NO CONTENT"
            return "M√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan. H√£y ki·ªÉm tra l·∫°i c√¢u h·ªèi c·ªßa b·∫°n nh√©!üòì"
        except Exception as e:
            return f"Agent x·∫£y ra l·ªói: {e}"
